// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 effective-4.2 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name CirrentSDK
import Alamofire
import SystemConfiguration.CaptiveNetwork
@_exported import CirrentSDK
import CommonCrypto
import CoreBluetooth
import CoreLocation
import Foundation
import CirrentSDK.GCDAsyncUdpSocket
import NetworkExtension
import CirrentSDK.NetworkTool
import CirrentSDK.NetworkUtils
import CirrentSDK.RSAUtil
import RxSwift
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
extension CirrentSDK.HMACAlgorithm : CirrentSDK.SignAlgorithm, CirrentSDK.VerifyAlgorithm {
  final public func sign(_ message: Foundation.Data) -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers public class DeviceKnownNetwork : CirrentSDK.BaseNetwork {
  @objc public var status: Swift.String
  @objc public var priority: Swift.Int
  @objc public var security: Swift.String
  @objc public var source: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
final public class HMACAlgorithm : CirrentSDK.Algorithm {
  final public let key: Foundation.Data
  final public let hash: CirrentSDK.HMACAlgorithm.Hash
  public enum Hash {
    case sha256
    case sha384
    case sha512
    public static func == (a: CirrentSDK.HMACAlgorithm.Hash, b: CirrentSDK.HMACAlgorithm.Hash) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(key: Foundation.Data, hash: CirrentSDK.HMACAlgorithm.Hash)
  public init?(key: Swift.String, hash: CirrentSDK.HMACAlgorithm.Hash)
  final public var name: Swift.String {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CirrentError : CirrentSDK.CustomEVObject {
  @objc public var code: Swift.String
  @objc public var message: Swift.String
  @objc public var statusCode: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DeviceData : CirrentSDK.BaseData {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CustomEVReflection {
  final public class func fromDictionary(_ dictionary: Foundation.NSDictionary, anyobjectTypeString: Swift.String, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize) -> ObjectiveC.NSObject?
  @discardableResult
  final public class func setPropertiesfromDictionary<T>(_ dictionary: Foundation.NSDictionary, anyObject: T, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> T where T : ObjectiveC.NSObject
  final public class func getValue(_ fromObject: ObjectiveC.NSObject, key: Swift.String) -> Any?
  final public class func toDictionary(_ theObject: ObjectiveC.NSObject, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize, isCachable: Swift.Bool = false, parents: [ObjectiveC.NSObject] = []) -> (Foundation.NSDictionary, Foundation.NSDictionary)
  final public class func dictionaryFromJson(_ json: Swift.String?) -> Foundation.NSDictionary
  final public class func dictionaryArrayFromJson(_ json: Swift.String?) -> [Foundation.NSDictionary]
  final public class func arrayFromData<T>(_ theObject: ObjectiveC.NSObject? = nil, type: T, data: Foundation.Data?, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> [T]
  final public class func arrayFromJson<T>(type: T, json: Swift.String?, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> [T]
  final public class func toJsonString(_ theObject: ObjectiveC.NSObject, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  final public class func toJsonData(_ theObject: ObjectiveC.NSObject, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Foundation.Data
  final public class func logObject(_ theObject: CirrentSDK.CustomEVReflectable, prettyPrinted: Swift.Bool = true)
  final public class func description(_ theObject: CirrentSDK.CustomEVReflectable, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = true) -> Swift.String
  final public class func hashValue(_ theObject: ObjectiveC.NSObject) -> Swift.Int
  final public class func encodeWithCoder(_ theObject: ObjectiveC.NSObject, aCoder: Foundation.NSCoder, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultNSCoding)
  final public class func decodeObjectWithCoder(_ theObject: ObjectiveC.NSObject, aDecoder: Foundation.NSCoder, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultNSCoding)
  final public class func areEqual(_ lhs: ObjectiveC.NSObject, rhs: ObjectiveC.NSObject) -> Swift.Bool
  final public class func dictionariesAreEqual(_ lhsdict: Foundation.NSDictionary, rhsdict: Foundation.NSDictionary) -> Swift.Bool
  final public class func getCleanAppName(_ forObject: ObjectiveC.NSObject? = nil) -> Swift.String
  final public class func getCleanAppName(_ aClass: Swift.AnyClass?) -> Swift.String
  final public class func setBundleIdentifier(_ forClass: Swift.AnyClass)
  final public class func setBundleIdentifier(_ identifier: Swift.String)
  final public class func setBundleIdentifiers(_ classes: Swift.Array<Swift.AnyClass>)
  final public class func setBundleIdentifiers(_ identifiers: Swift.Array<Swift.String>)
  final public class func setDateFormatter(_ formatter: Foundation.DateFormatter?)
  final public class func swiftClassTypeFromString(_ className: Swift.String) -> Swift.AnyClass?
  final public class func swiftClassFromString(_ className: Swift.String) -> ObjectiveC.NSObject?
  final public class func swiftStringFromClass(_ theObject: ObjectiveC.NSObject) -> Swift.String
  final public class func swiftStringFromClass(_ aClass: Swift.AnyClass) -> Swift.String
  final public class func valueForAny(_ parentObject: Any? = nil, key: Swift.String? = nil, anyValue: Any, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, isCachable: Swift.Bool = false, parents: [ObjectiveC.NSObject] = []) -> (value: Swift.AnyObject, type: Swift.String, isObject: Swift.Bool)
  final public class func convertToInternalSwiftRepresentation(type: Swift.String) -> Swift.String
  final public class func valueForAnyDetail(_ parentObject: Any? = nil, key: Swift.String? = nil, theValue: Any, valueType: Swift.String) -> (value: Swift.AnyObject, type: Swift.String, isObject: Swift.Bool)
  public static func setObjectValue<T>(_ anyObject: T, key: Swift.String, theValue: Any?, typeInObject: Swift.String? = nil, valid: Swift.Bool, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, parents: [ObjectiveC.NSObject] = []) where T : ObjectiveC.NSObject
  @objc deinit
}
extension Foundation.Date {
  public init?(fromDateTimeString: Swift.String)
}
extension Swift.Array where Element : ObjectiveC.NSObject {
  public init(json: Swift.String?, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(data: Foundation.Data?, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(dictionaryArray: [Foundation.NSDictionary], conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize)
  public init(dictionary: Foundation.NSDictionary, forKeyPath: Swift.String, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize)
  public func getArrayTypeInstance<T>(_ arr: Swift.Array<T>) -> T where T : ObjectiveC.NSObject
  public func getTypeInstance<T>() -> T where T : ObjectiveC.NSObject
  public func getTypeAsString() -> Swift.String
}
extension Swift.Array where Element : CirrentSDK.CustomEVReflectable {
  public func toJsonString(_ conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(_ conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false, encoding: Swift.String.Encoding = .utf8) -> Foundation.Data
  public func toDictionaryArray(_ conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize) -> Foundation.NSArray
}
extension Swift.Array where Element : Foundation.NSDictionary {
  public init(jsonArray: Swift.String)
  public init(dataArray: Foundation.Data)
  public func toJsonStringArray(prettyPrinted: Swift.Bool = false) -> Swift.String
}
extension Foundation.NSArray {
  public func nestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[T]]
  public func doubleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[T]]]
  public func tripleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[T]]]]
  public func quadrupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[T]]]]]
  public func quintupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[[T]]]]]]
  public func sextupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[[[T]]]]]]]
}
@objc @_inheritsConvenienceInitializers public class StringValue : CirrentSDK.CustomEVObject {
  @objc public var value: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
public protocol CustomEVGenericsKVC {
  func setGenericValue(_ value: Swift.AnyObject!, forUndefinedKey key: Swift.String)
  func getGenericType() -> ObjectiveC.NSObject
}
public protocol CustomEVRaw {
  var anyRawValue: Any { get }
}
extension CirrentSDK.CustomEVRaw where Self : Swift.RawRepresentable {
  public var anyRawValue: Any {
    get
  }
}
public protocol CustomEVArrayConvertable {
  func convertArray(_ key: Swift.String, array: Any) -> Foundation.NSArray
}
public protocol CustomEVAssociated {
}
extension CirrentSDK.CustomEVAssociated {
  public var associated: (label: Swift.String, value: Any?, values: [Any]) {
    get
  }
}
extension Swift.Dictionary {
  public init<T>(associated: [T]?) where T : CirrentSDK.CustomEVAssociated
}
@objc @_inheritsConvenienceInitializers public class BonjourService : CirrentSDK.CustomEVObject {
  @objc required dynamic public init()
  @objc deinit
}
public protocol CirrentProgressView {
  func showProgress()
  func stopProgress()
}
public struct CustomPrintOptions : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: CirrentSDK.CustomPrintOptions
  public static let UnknownKeypath: CirrentSDK.CustomPrintOptions
  public static let IncorrectKey: CirrentSDK.CustomPrintOptions
  public static let ShouldExtendNSObject: CirrentSDK.CustomPrintOptions
  public static let IsInvalidJson: CirrentSDK.CustomPrintOptions
  public static let MissingProtocol: CirrentSDK.CustomPrintOptions
  public static let MissingKey: CirrentSDK.CustomPrintOptions
  public static let InvalidType: CirrentSDK.CustomPrintOptions
  public static let InvalidValue: CirrentSDK.CustomPrintOptions
  public static let InvalidClass: CirrentSDK.CustomPrintOptions
  public static let EnumWithoutAssociatedValue: CirrentSDK.CustomPrintOptions
  public static let UseWorkaround: CirrentSDK.CustomPrintOptions
  public static var All: CirrentSDK.CustomPrintOptions
  public static var Active: CirrentSDK.CustomPrintOptions
  public var description: Swift.String {
    get
  }
  public typealias ArrayLiteralElement = CirrentSDK.CustomPrintOptions
  public typealias Element = CirrentSDK.CustomPrintOptions
  public typealias RawValue = Swift.Int
}
public func evPrint(_ options: CirrentSDK.CustomPrintOptions, _ value: Swift.String)
public protocol Algorithm : AnyObject {
  var name: Swift.String { get }
}
public protocol SignAlgorithm : CirrentSDK.Algorithm {
  func sign(_ message: Foundation.Data) -> Foundation.Data
}
public protocol VerifyAlgorithm : CirrentSDK.Algorithm {
  func verify(_ message: Foundation.Data, signature: Foundation.Data) -> Swift.Bool
}
extension CirrentSDK.SignAlgorithm {
  public func verify(_ message: Foundation.Data, signature: Foundation.Data) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PerformanceData : CirrentSDK.BaseData {
  override public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PrivateNetworkInfo : CirrentSDK.CustomEVObject {
  @objc public var priority: Swift.Int
  @objc public var hidden: Swift.Bool
  @objc public var ssid: Swift.String
  @objc public var hexSsid: Swift.String
  @objc public var security: Swift.String
  @objc public var encryptedPreSharedKey: Swift.String
  override public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public protocol CustomEVReflectable : ObjectiveC.NSObjectProtocol {
  func initValidation(_ dict: Foundation.NSDictionary)
  func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  func encodePropertyValue(value: Any, key: Swift.String) -> Any
  func getType(_ dict: Foundation.NSDictionary) -> CirrentSDK.CustomEVReflectable
  func getSpecificType(_ dict: Foundation.NSDictionary) -> CirrentSDK.CustomEVReflectable?
  func customConverter() -> Swift.AnyObject?
  var evReflectionStatuses: [(CirrentSDK.CustomDeserializationStatus, Swift.String)] { get set }
}
extension CirrentSDK.CustomEVReflectable where Self : ObjectiveC.NSObject {
  public var evReflectionStatuses: [(CirrentSDK.CustomDeserializationStatus, Swift.String)] {
    get
    set
  }
  public init(dictionary: Foundation.NSDictionary, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(json: Swift.String?, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(data: Foundation.Data, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(fileNameInTemp: Swift.String, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultNSCoding)
  public init(fileNameInDocuments: Swift.String, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultNSCoding)
  public init(usingValuesFrom: CirrentSDK.CustomEVReflectable, conversionOptions: CirrentSDK.CustomConversionOptions = .None)
  public var hashValue: Swift.Int {
    get
  }
  public var hash: Swift.Int {
    get
  }
}
extension CirrentSDK.CustomEVReflectable {
  public static func == (lhs: CirrentSDK.CustomEVReflectable, rhs: CirrentSDK.CustomEVReflectable) -> Swift.Bool
  public static func != (lhs: CirrentSDK.CustomEVReflectable, rhs: CirrentSDK.CustomEVReflectable) -> Swift.Bool
  public func initValidation(_ dict: Foundation.NSDictionary)
  public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  public func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  public func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  public func encodePropertyValue(value: Any, key: Swift.String) -> Any
  public func customConverter() -> Swift.AnyObject?
  public func getType(_ dict: Foundation.NSDictionary) -> CirrentSDK.CustomEVReflectable
  public func getSpecificType(_ dict: Foundation.NSDictionary) -> CirrentSDK.CustomEVReflectable?
  @discardableResult
  public func saveToTemp(_ fileName: Swift.String) -> Swift.Bool
  @discardableResult
  public func saveToDocuments(_ fileName: Swift.String) -> Swift.Bool
  public func toDictionary(_ conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize) -> Foundation.NSDictionary
  public func toJsonString(_ conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(_ conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Foundation.Data
  public static func arrayFromJson<T>(_ json: Swift.String?, conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize) -> [T] where T : ObjectiveC.NSObject
  public func mapObjectTo<T>(_ conversionOptions: CirrentSDK.CustomConversionOptions = .DefaultDeserialize) -> T where T : ObjectiveC.NSObject
  public func typeForKey(_ propertyName: Swift.String) -> Any.Type?
  public func convertDictionary(_ key: Swift.String, dict: Any) -> Foundation.NSDictionary
  public func initMayNotContainKeys(_ keys: [Swift.String], dict: Foundation.NSDictionary)
  public func initMustContainKeys(_ keys: [Swift.String], dict: Foundation.NSDictionary)
  public func evReflectionStatus() -> CirrentSDK.CustomDeserializationStatus
  public func addStatusMessage(_ type: CirrentSDK.CustomDeserializationStatus, message: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NetworkEventData : CirrentSDK.BaseData {
  override public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  @objc deinit
}
public struct ClaimSet {
  public init(claims: [Swift.String : Any]? = nil)
  public subscript(key: Swift.String) -> Any? {
    get
    set
  }
}
extension CirrentSDK.ClaimSet {
  public var issuer: Swift.String? {
    get
    set
  }
  public var audience: Swift.String? {
    get
    set
  }
  public var expiration: Foundation.Date? {
    get
    set
  }
  public var notBefore: Foundation.Date? {
    get
    set
  }
  public var issuedAt: Foundation.Date? {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class ClaimSetBuilder {
  public var issuer: Swift.String? {
    get
    set
  }
  public var audience: Swift.String? {
    get
    set
  }
  public var expiration: Foundation.Date? {
    get
    set
  }
  public var notBefore: Foundation.Date? {
    get
    set
  }
  public var issuedAt: Foundation.Date? {
    get
    set
  }
  public subscript(key: Swift.String) -> Any? {
    get
    set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RequestData : CirrentSDK.CustomEVObject {
  @objc override dynamic public func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JWT {
  public static func encode(claims: CirrentSDK.ClaimSet, algorithm: CirrentSDK.AlgorithmNum, headers: [Swift.String : Swift.String]? = nil) -> Swift.String
  public static func encode(claims: [Swift.String : Any], algorithm: CirrentSDK.AlgorithmNum, headers: [Swift.String : Swift.String]? = nil) -> Swift.String
  public static func encode(_ algorithm: CirrentSDK.AlgorithmNum, closure: ((CirrentSDK.ClaimSetBuilder) -> Swift.Void)) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StringArray : CirrentSDK.CustomEVObject {
  @objc public var value: [Swift.String]
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SynchronizedDictionary<K, V> where K : Swift.Hashable {
  public func setValue(value: V?, forKey key: K)
  public var count: Swift.Int {
    get
  }
  public func getValue(key: K) -> V?
  public func getFullDictionary() -> [K : V]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UserActionStatus : CirrentSDK.CustomEVObject {
  @objc public var code: Swift.String
  @objc public var message: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
public protocol CustomEVCustomReflectable {
  static func constructWith(value: Any?) -> CirrentSDK.CustomEVCustomReflectable?
  func constructWith(value: Any?) -> CirrentSDK.CustomEVCustomReflectable?
  func toCodableValue() -> Any
}
@objc @_inheritsConvenienceInitializers @objcMembers open class CustomEVObject : ObjectiveC.NSObject, Foundation.NSCoding, CirrentSDK.CustomEVReflectable {
  @objc override dynamic open func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
  @objc required override dynamic public init()
  @objc convenience required public init?(coder: Foundation.NSCoder)
  @objc open func encode(with aCoder: Foundation.NSCoder)
  @objc open func initValidation(_ dict: Foundation.NSDictionary)
  open func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  open func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  @objc open func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  @objc open func encodePropertyValue(value: Any, key: Swift.String) -> Any
  @objc open func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  open func getSpecificType(_ dict: Foundation.NSDictionary) -> CirrentSDK.CustomEVReflectable?
  @objc open func customConverter() -> Swift.AnyObject?
  @objc deinit
}
extension Swift.String : Alamofire.ParameterEncoding {
  public func encode(_ urlRequest: Alamofire.URLRequestConvertible, with parameters: Alamofire.Parameters?) throws -> Foundation.URLRequest
}
@objc @_inheritsConvenienceInitializers public class DeviceStatusInfo : CirrentSDK.CustomEVObject {
  @objc public var bound: Swift.String
  @objc public var timestamp: Swift.String
  @objc public var candidateNetworks: [CirrentSDK.WiFiNetwork]
  @objc public var deviceKnownNetworks: [CirrentSDK.DeviceKnownNetwork]
  override public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  @objc public func getBound() -> Swift.String
  @objc required dynamic public init()
  @objc deinit
}
public struct CustomConversionOptions : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: CirrentSDK.CustomConversionOptions
  public static let PropertyConverter: CirrentSDK.CustomConversionOptions
  public static let PropertyMapping: CirrentSDK.CustomConversionOptions
  public static let SkipPropertyValue: CirrentSDK.CustomConversionOptions
  public static let KeyCleanup: CirrentSDK.CustomConversionOptions
  public static let Decoding: CirrentSDK.CustomConversionOptions
  public static let Encoding: CirrentSDK.CustomConversionOptions
  public static var All: CirrentSDK.CustomConversionOptions
  public static var DefaultNSCoding: CirrentSDK.CustomConversionOptions
  public static var DefaultComparing: CirrentSDK.CustomConversionOptions
  public static var DefaultDeserialize: CirrentSDK.CustomConversionOptions
  public static var DefaultSerialize: CirrentSDK.CustomConversionOptions
  public var description: Swift.String {
    get
  }
  public typealias ArrayLiteralElement = CirrentSDK.CustomConversionOptions
  public typealias Element = CirrentSDK.CustomConversionOptions
  public typealias RawValue = Swift.Int
}
public struct CustomDeserializationStatus : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: CirrentSDK.CustomDeserializationStatus
  public static let IncorrectKey: CirrentSDK.CustomDeserializationStatus
  public static let MissingKey: CirrentSDK.CustomDeserializationStatus
  public static let InvalidType: CirrentSDK.CustomDeserializationStatus
  public static let InvalidValue: CirrentSDK.CustomDeserializationStatus
  public static let InvalidClass: CirrentSDK.CustomDeserializationStatus
  public static let MissingProtocol: CirrentSDK.CustomDeserializationStatus
  public static let Custom: CirrentSDK.CustomDeserializationStatus
  public var description: Swift.String {
    get
  }
  public typealias ArrayLiteralElement = CirrentSDK.CustomDeserializationStatus
  public typealias Element = CirrentSDK.CustomDeserializationStatus
  public typealias RawValue = Swift.Int
}
public protocol Cancelable : ObjectiveC.NSObjectProtocol {
  func cancel()
}
public enum AlgorithmNum : Swift.CustomStringConvertible {
  case hs256(Foundation.Data)
  case hs384(Foundation.Data)
  case hs512(Foundation.Data)
  public var description: Swift.String {
    get
  }
}
extension Foundation.NSMutableDictionary {
  convenience public init(json: Swift.String)
  convenience public init(data: Foundation.Data)
}
extension Foundation.NSDictionary {
  public func toJsonString(prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(prettyPrinted: Swift.Bool = false) -> Foundation.Data
}
extension Foundation.NSMutableDictionary {
  public func unionInPlace(dictionary: Foundation.NSDictionary)
  public func unionInPlace<S>(sequence: S) where S : Swift.Sequence, S.Element == (Foundation.NSMutableDictionary.Key, Foundation.NSMutableDictionary.Value)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UpnpServiceFinder : ObjectiveC.NSObject {
  @objc deinit
}
extension CirrentSDK.UpnpServiceFinder : CirrentSDK.GCDAsyncUdpSocketDelegate {
  @objc dynamic public func udpSocket(_ sock: CirrentSDK.GCDAsyncUdpSocket, didNotConnect error: Swift.Error?)
  @objc dynamic public func udpSocket(_ sock: CirrentSDK.GCDAsyncUdpSocket, didNotSendDataWithTag tag: Swift.Int, dueToError error: Swift.Error?)
  @objc dynamic public func udpSocket(_ sock: CirrentSDK.GCDAsyncUdpSocket, didReceive data: Foundation.Data, fromAddress address: Foundation.Data, withFilterContext filterContext: Any?)
  @objc dynamic public func udpSocketDidClose(_ sock: CirrentSDK.GCDAsyncUdpSocket, withError error: Swift.Error?)
}
@_hasMissingDesignatedInitializers public class MobileAppIntelligence {
  public static func setDebugMode(enabled: Swift.Bool)
  public static func isDebugModeEnabled() -> Swift.Bool
  public static func initialize(token: Swift.String, onTokenInvalid: @escaping (_ retrier: CirrentSDK.Retrier) -> (), onError: ((_ error: CirrentSDK.MAIError) -> ())? = nil)
  public static func startOnboarding(onboardingSessionTimeout: Swift.Int? = nil, type: CirrentSDK.OnboardingType? = nil)
  public static func startOnboarding(onboardingSessionTimeout: Swift.Int, customType: Swift.String? = nil)
  public static func startOnboarding(onboardingSessionTimeout: Swift.Int? = nil, customType: Swift.String)
  public static func setOnboardingType(type: CirrentSDK.OnboardingType)
  public static func setOnboardingType(customType: Swift.String)
  public static func setOnboardingDeviceInfo(deviceId: Swift.String, additionalAttributes: [Swift.String : Swift.String]? = nil)
  public static func enterStep(_ stepData: CirrentSDK.StepData)
  public static func endOnboarding(_ endData: CirrentSDK.EndData? = nil)
  public static func createToken(expiresIn: Swift.Int, accountId: Swift.String, appId: Swift.String, appKey: Swift.String, appSecret: Swift.String) -> Swift.String
  public static func removeAllCollectedData()
  public static func cancelAllTasks()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MAIError {
  public var httpErrorCode: Swift.Int {
    get
    set
  }
  public var message: Swift.String {
    get
  }
  public var errorType: CirrentSDK.ErrorType {
    get
  }
  @objc deinit
}
public enum OnboardingType : Swift.String {
  case softap
  case ble
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ErrorType {
  case init_data_collecting_is_active
  case lack_of_location_permission
  case request_failed
  case reserved_step_name_used
  case initialization_required
  case start_onboarding_required
  case end_onboarding_required
  case onboarding_type_required
  public static func == (a: CirrentSDK.ErrorType, b: CirrentSDK.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SynchronizedArray<T> {
  public func append(newElement: T)
  public var count: Swift.Int {
    get
  }
  public func get(index: Swift.Int) -> T
  public func forEach(_ body: (T) -> Swift.Void)
  public func getFullArray() -> [T]
  @objc deinit
}
extension CirrentSDK.SynchronizedArray where T : Swift.Equatable {
  public func contains(_ element: T) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NetUtils : ObjectiveC.NSObject {
  public static let shared: CirrentSDK.NetUtils
  public var isWifiEnabled: Swift.Bool {
    get
  }
  public func addBearerPrefix(_ token: Swift.String) -> Swift.String
  public func getCurrentBssid() -> Swift.String
  public func getCurrentSsid() -> Swift.String
  public func getPrivateNetworkInfo(isHiddenNetwork: Swift.Bool, priority: Swift.Int, selectedNetwork: CirrentSDK.WiFiNetwork, preSharedKey: Swift.String, scdPublicKey: Swift.String) -> Swift.String
  public func getGatewayIp(_ completion: @escaping (Swift.String) -> ())
  public func getAccountAndDeviceId(_ identificationDeviceData: Swift.String) -> [Swift.Int : Swift.String]
  @objc deinit
}
public struct Collector : Swift.Hashable {
  public static func upnp(servicesDiscoveryTimeout: Swift.Double? = nil) -> CirrentSDK.Collector
  public static func bonjour(serviceTypesFinderTimeout: Swift.Double? = nil, serviceFinderTimeout: Swift.Double? = nil, resolvingTimeout: Swift.Double? = nil) -> CirrentSDK.Collector
  public static func general() -> CirrentSDK.Collector
  public var hashValue: Swift.Int {
    get
  }
  public static func == (lhs: CirrentSDK.Collector, rhs: CirrentSDK.Collector) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class WiFiNetwork : CirrentSDK.BaseNetwork {
  @objc public var frequency: Swift.Int
  @objc public var flags: Swift.String
  @objc public var signalLevel: Swift.Int
  @objc public var anqpRoamingConsortium: Swift.String
  @objc public var capabilities: Swift.Int
  @objc public var quality: Swift.Int
  @objc public var noiseLevel: Swift.Int
  @objc public var informationElement: Swift.String
  @objc public var timestamp: Swift.String
  @objc public func initialization(bssid: Swift.String, ssid: Swift.String)
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StateCollector {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SoftApService : ObjectiveC.NSObject {
  public static var shared: CirrentSDK.SoftApService {
    get
  }
  public static let commonErrorHandler: (_ code: Swift.String, _ message: Swift.String) -> ()
  public func setProgressView(customProgressView: CirrentSDK.CirrentProgressView?) -> CirrentSDK.SoftApService
  public func setSoftApPort(port: Swift.Int) -> CirrentSDK.SoftApService
  public func setSoftApDeviceStatusTimings(softApDeviceStatusDelay: Swift.Int, softApDeviceStatusMaxRequestCount: Swift.Int) -> CirrentSDK.SoftApService
  @available(iOS 11.0, *)
  public func connectToDeviceViaSoftAp(_ softApSsid: Swift.String, _ delegate: CirrentSDK.SoftApDeviceConnectionCallback)
  public func getDeviceInfoViaSoftAp(userAccountId: Swift.String, delegate: CirrentSDK.SoftApDeviceInfoCallback, exceptionHandler: @escaping (_ code: Swift.String, _ message: Swift.String) -> () = commonErrorHandler)
  public func identifyYourself(delegate: CirrentSDK.SoftApIdentificationCallback, exceptionHandler: @escaping (_ code: Swift.String, _ message: Swift.String) -> () = commonErrorHandler)
  public func putPrivateCredentialsViaSoftAp(isHiddenNetwork: Swift.Bool, priority: Swift.Int, softApSsid: Swift.String, selectedNetwork: CirrentSDK.WiFiNetwork, preSharedKey: Swift.String, delegate: CirrentSDK.SoftApCredentialsSenderCallback, exceptionHandler: @escaping (_ code: Swift.String, _ message: Swift.String) -> () = commonErrorHandler)
  public func cancelAllTasks()
  public func leaveSoftApNetwork(softApSsid: Swift.String, disconnected: @escaping (_ isDisconnectedSuccessfully: Swift.Bool) -> ())
  @objc override dynamic public init()
  @objc deinit
}
extension CirrentSDK.SoftApService {
  public func onNetworkJoined(softApSsid: Swift.String)
  public func onJoiningProcess()
  public func onNetworkJoiningFailed()
  public func onDroppedSoftApNetwork(softApSsid: Swift.String)
}
public protocol SoftApDeviceConnectionCallback {
  func onDeviceConnectedSuccessfully()
  func onConnectionFailed()
}
public protocol SoftApIdentificationCallback {
  func onDeviceIdentificationActionSent()
}
public protocol SoftApDeviceInfoCallback {
  func onDeviceInfoReceived(deviceInfo: CirrentSDK.DeviceInfo, candidateNetworks: [CirrentSDK.WiFiNetwork])
}
public protocol SoftApCredentialsSenderCallback {
  func onCredentialsSent()
  func onReturnedToNetworkWithInternet()
  func onFailedToReturnToNetworkWithInternet()
  func onNetworkJoiningFailed()
  func onIncorrectPriorityValueUsed()
}
@objc @_inheritsConvenienceInitializers public class BluetoothService : ObjectiveC.NSObject {
  public static let shared: CirrentSDK.BluetoothService
  public func setProgressView(customProgressView: CirrentSDK.CirrentProgressView?) -> CirrentSDK.BluetoothService
  public func setBluetoothDeviceStatusTimings(bluetoothDeviceStatusDelay: Swift.Int, bluetoothDeviceStatusMaxRequestCount: Swift.Int) -> CirrentSDK.BluetoothService
  public func connectToDeviceViaBluetooth(blePrefix: Swift.String, delegate: CirrentSDK.BluetoothDeviceConnectionCallback)
  public func getDeviceInfoViaBluetooth(delegate: CirrentSDK.BluetoothDeviceInfoCallback)
  public func identify(delegate: CirrentSDK.BluetoothIdentificationCallback)
  public func putPrivateCredentialsViaBluetooth(isHiddenNetwork: Swift.Bool, priority: Swift.Int, preSharedKey: Swift.String, selectedNetwork: CirrentSDK.WiFiNetwork, delegate: CirrentSDK.BluetoothCredentialsSenderCallback)
  public func cancelAllTasks()
  @objc override dynamic public init()
  @objc deinit
}
extension CirrentSDK.BluetoothService {
  public func onNetworkJoined()
  public func onJoiningProcess()
  public func onNetworkJoiningFailed(errorMessage: Swift.String)
  public func onFailedToGetNetworkStatus()
}
extension CirrentSDK.BluetoothService : CirrentSDK.BluetoothDeviceInfoCallback {
  public func onOperationTimeLimitExceeded()
  public func onFailedToGetDeviceInfo()
  public func onConnectionIsNotEstablished()
  public func onInfoReceived(deviceInfo: CirrentSDK.DeviceInfo, candidateNetworks: [CirrentSDK.WiFiNetwork])
}
public protocol BluetoothDeviceConnectionCallback {
  func onBluetoothDisabled()
  func onDeviceConnectedSuccessfully()
  func onFailedToFindDevice()
}
public protocol BluetoothDeviceInfoCallback {
  func onOperationTimeLimitExceeded()
  func onFailedToGetDeviceInfo()
  func onConnectionIsNotEstablished()
  func onInfoReceived(deviceInfo: CirrentSDK.DeviceInfo, candidateNetworks: [CirrentSDK.WiFiNetwork])
}
public protocol BluetoothIdentificationCallback {
  func onOperationTimeLimitExceeded()
  func onFailed()
  func onConnectionIsNotEstablished()
  func onDeviceIdentificationActionSent()
}
public protocol BluetoothCredentialsSenderCallback {
  func onOperationTimeLimitExceeded()
  func onCredentialsSent()
  func onConnectionIsNotEstablished()
  func onConnectedToPrivateNetwork()
  func onFailedToGetNetworkStatus()
  func onNetworkJoiningFailed(errorMessage: Swift.String)
  func onIncorrectPriorityValueUsed()
}
@objc @_inheritsConvenienceInitializers public class BaseNetwork : CirrentSDK.CustomEVObject {
  @objc public var bssid: Swift.String
  @objc public var hexSsid: Swift.String
  @objc public var ssid: Swift.String {
    @objc get
    @objc set
  }
  @objc public func getPresentedSsid() -> Swift.String
  @objc public func getDecodedSsid() -> Swift.String
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataContainer : CirrentSDK.CustomEVObject {
  @objc override dynamic public func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  override public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class GatewayIpProvider : ObjectiveC.NSObject {
  @objc deinit
}
public struct UpnpSearchRequest {
  public var message: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseData : CirrentSDK.CustomEVObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Retrier {
  public func retry(token: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DeviceInfo : CirrentSDK.CustomEVObject {
  @objc public var deviceId: Swift.String
  @objc public var accountId: Swift.String
  @objc public var publicKey: Swift.String
  @objc public var customString: Swift.String
  override public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WifiNetworkArray : CirrentSDK.CustomEVObject {
  @objc public var value: [CirrentSDK.WiFiNetwork]
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Event : CirrentSDK.CustomEVObject {
  @objc override dynamic public func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StepData {
  public static func create(stepName: Swift.String) -> CirrentSDK.StepData
  public static func create(result: CirrentSDK.StepResult, stepName: Swift.String, reason: Swift.String) -> CirrentSDK.StepData
  public func setDebugInfo(_ debugInfo: [Swift.String : Swift.String]) -> CirrentSDK.StepData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EndData {
  public static func create(failureReason: Swift.String? = nil) -> CirrentSDK.EndData
  public func setDebugInfo(_ debugInfo: [Swift.String : Swift.String]) -> CirrentSDK.EndData
  @objc deinit
}
public enum StepResult : Swift.String {
  case success
  case failure
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Characteristic {
  final public let characteristic: CoreBluetooth.CBCharacteristic
  final public let service: CirrentSDK.Service
  public var value: Foundation.Data? {
    get
  }
  public var uuid: CoreBluetooth.CBUUID {
    get
  }
  public var isNotifying: Swift.Bool {
    get
  }
  public var properties: CoreBluetooth.CBCharacteristicProperties {
    get
  }
  public func writeValue(_ data: Foundation.Data, type: CoreBluetooth.CBCharacteristicWriteType) -> RxSwift.Single<CirrentSDK.Characteristic>
  public func observeValueUpdateAndSetNotification() -> RxSwift.Observable<CirrentSDK.Characteristic>
  @objc deinit
}
extension CirrentSDK.Characteristic : Swift.Equatable {
}
public func == (lhs: CirrentSDK.Characteristic, rhs: CirrentSDK.Characteristic) -> Swift.Bool
public typealias DisconnectionReason = Swift.Error
@_hasMissingDesignatedInitializers public class CentralManager : CirrentSDK.ManagerType {
  final public let manager: CoreBluetooth.CBCentralManager
  @available(*, deprecated, renamed: "CentralManager.manager")
  public var centralManager: CoreBluetooth.CBCentralManager {
    get
  }
  convenience public init(queue: Dispatch.DispatchQueue = .main, options: [Swift.String : Swift.AnyObject]? = nil, cbCentralManager: CoreBluetooth.CBCentralManager? = nil)
  public func attach()
  public var state: CirrentSDK.BluetoothState {
    get
  }
  public func observeState() -> RxSwift.Observable<CirrentSDK.BluetoothState>
  public func observeStateWithInitialValue() -> RxSwift.Observable<CirrentSDK.BluetoothState>
  public func scanForPeripherals(withServices serviceUUIDs: [CoreBluetooth.CBUUID]?, options: [Swift.String : Any]? = nil) -> RxSwift.Observable<CirrentSDK.ScannedPeripheral>
  public func establishConnection(_ peripheral: CirrentSDK.Peripheral, options: [Swift.String : Any]? = nil) -> RxSwift.Observable<CirrentSDK.Peripheral>
  public typealias Manager = CoreBluetooth.CBCentralManager
  @objc deinit
}
public enum BluetoothState : Swift.Int {
  case unknown
  case resetting
  case unsupported
  case unauthorized
  case poweredOff
  case poweredOn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BluetoothError : Swift.Error {
  case destroyed
  case scanInProgress
  case advertisingInProgress
  case advertisingStartFailed(Swift.Error)
  case bluetoothUnsupported
  case bluetoothUnauthorized
  case bluetoothPoweredOff
  case bluetoothInUnknownState
  case bluetoothResetting
  case peripheralIsAlreadyObservingConnection(CirrentSDK.Peripheral)
  @available(*, deprecated, renamed: "BluetoothError.peripheralIsAlreadyObservingConnection")
  case peripheralIsConnectingOrAlreadyConnected(CirrentSDK.Peripheral)
  case peripheralConnectionFailed(CirrentSDK.Peripheral, Swift.Error?)
  case peripheralDisconnected(CirrentSDK.Peripheral, Swift.Error?)
  case peripheralRSSIReadFailed(CirrentSDK.Peripheral, Swift.Error?)
  case servicesDiscoveryFailed(CirrentSDK.Peripheral, Swift.Error?)
  case includedServicesDiscoveryFailed(CirrentSDK.Peripheral, Swift.Error?)
  case addingServiceFailed(CoreBluetooth.CBService, Swift.Error?)
  case characteristicsDiscoveryFailed(CirrentSDK.Service, Swift.Error?)
  case characteristicWriteFailed(CirrentSDK.Characteristic, Swift.Error?)
  case characteristicReadFailed(CirrentSDK.Characteristic, Swift.Error?)
  case characteristicNotifyChangeFailed(CirrentSDK.Characteristic, Swift.Error?)
  case characteristicSetNotifyValueFailed(CirrentSDK.Characteristic, Swift.Error?)
  case descriptorsDiscoveryFailed(CirrentSDK.Characteristic, Swift.Error?)
  case openingL2CAPChannelFailed(CirrentSDK.Peripheral, Swift.Error?)
  case publishingL2CAPChannelFailed(CoreBluetooth.CBL2CAPPSM, Swift.Error?)
  case unknownWriteType
}
extension CirrentSDK.BluetoothError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension CirrentSDK.BluetoothError : Swift.Equatable {
}
public func == (lhs: CirrentSDK.BluetoothError, rhs: CirrentSDK.BluetoothError) -> Swift.Bool
@_hasMissingDesignatedInitializers public class RxBluetoothLog {
  @objc deinit
}
public protocol ManagerType : AnyObject {
  associatedtype Manager
  var manager: Self.Manager { get }
  var state: CirrentSDK.BluetoothState { get }
  func observeState() -> RxSwift.Observable<CirrentSDK.BluetoothState>
  func observeStateWithInitialValue() -> RxSwift.Observable<CirrentSDK.BluetoothState>
}
extension CirrentSDK.ManagerType {
  public func ensure<T>(_ state: CirrentSDK.BluetoothState, observable: RxSwift.Observable<T>) -> RxSwift.Observable<T>
}
@_hasMissingDesignatedInitializers public class Service {
  final public let service: CoreBluetooth.CBService
  final public let peripheral: CirrentSDK.Peripheral
  public var isPrimary: Swift.Bool {
    get
  }
  public var uuid: CoreBluetooth.CBUUID {
    get
  }
  public var includedServices: [CirrentSDK.Service]? {
    get
  }
  public var characteristics: [CirrentSDK.Characteristic]? {
    get
  }
  public func discoverCharacteristics(_ characteristicUUIDs: [CoreBluetooth.CBUUID]?) -> RxSwift.Single<[CirrentSDK.Characteristic]>
  @objc deinit
}
extension CirrentSDK.Service : Swift.Equatable {
}
public func == (lhs: CirrentSDK.Service, rhs: CirrentSDK.Service) -> Swift.Bool
@_hasMissingDesignatedInitializers public class Peripheral {
  unowned final public let manager: CirrentSDK.CentralManager
  final public let peripheral: CoreBluetooth.CBPeripheral
  public var isConnected: Swift.Bool {
    get
  }
  public var state: CoreBluetooth.CBPeripheralState {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var identifier: Foundation.UUID {
    get
  }
  public var services: [CirrentSDK.Service]? {
    get
  }
  public var canSendWriteWithoutResponse: Swift.Bool {
    get
  }
  public func establishConnection(options: [Swift.String : Any]? = nil) -> RxSwift.Observable<CirrentSDK.Peripheral>
  public func discoverServices(_ serviceUUIDs: [CoreBluetooth.CBUUID]?) -> RxSwift.Single<[CirrentSDK.Service]>
  public func discoverCharacteristics(_ characteristicUUIDs: [CoreBluetooth.CBUUID]?, for service: CirrentSDK.Service) -> RxSwift.Single<[CirrentSDK.Characteristic]>
  public func observeWrite(for characteristic: CirrentSDK.Characteristic? = nil) -> RxSwift.Observable<CirrentSDK.Characteristic>
  @available(macOS 10.12, iOS 9.0, *)
  public func maximumWriteValueLength(for type: CoreBluetooth.CBCharacteristicWriteType) -> Swift.Int
  public func writeValue(_ data: Foundation.Data, for characteristic: CirrentSDK.Characteristic, type: CoreBluetooth.CBCharacteristicWriteType, canSendWriteWithoutResponseCheckEnabled: Swift.Bool = true) -> RxSwift.Single<CirrentSDK.Characteristic>
  public func observeValueUpdateAndSetNotification(for characteristic: CirrentSDK.Characteristic) -> RxSwift.Observable<CirrentSDK.Characteristic>
  public func observeWriteWithoutResponseReadiness() -> RxSwift.Observable<Swift.Void>
  @objc deinit
}
extension CirrentSDK.Peripheral : Swift.Equatable {
}
public func == (lhs: CirrentSDK.Peripheral, rhs: CirrentSDK.Peripheral) -> Swift.Bool
@_hasMissingDesignatedInitializers public class ScannedPeripheral {
  final public let peripheral: CirrentSDK.Peripheral
  final public let advertisementData: [Swift.String : Any]
  final public let rssi: Foundation.NSNumber
  public var localName: Swift.String? {
    get
  }
  @objc deinit
}
extension CirrentSDK.HMACAlgorithm.Hash : Swift.Equatable {}
extension CirrentSDK.HMACAlgorithm.Hash : Swift.Hashable {}
extension CirrentSDK.OnboardingType : Swift.Equatable {}
extension CirrentSDK.OnboardingType : Swift.Hashable {}
extension CirrentSDK.OnboardingType : Swift.RawRepresentable {}
extension CirrentSDK.ErrorType : Swift.Equatable {}
extension CirrentSDK.ErrorType : Swift.Hashable {}
extension CirrentSDK.StepResult : Swift.Equatable {}
extension CirrentSDK.StepResult : Swift.Hashable {}
extension CirrentSDK.StepResult : Swift.RawRepresentable {}
extension CirrentSDK.BluetoothState : Swift.Equatable {}
extension CirrentSDK.BluetoothState : Swift.Hashable {}
extension CirrentSDK.BluetoothState : Swift.RawRepresentable {}
